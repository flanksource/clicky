package pdf

import (
	"os"
	"testing"

	"github.com/flanksource/clicky/api"
)

func TestPDFWidgets(t *testing.T) {
	// Create a new PDF builder
	builder := NewBuilder()

	// Set header and footer
	builder.Header = api.Text{
		Content: "Test Document",
		Class: api.Class{
			Font: &api.Font{
				Size: 1.2, // 1.2rem
				Bold: true,
			},
			Foreground: &api.Color{Hex: "#333333"},
		},
	}

	builder.Footer = api.Text{
		Content: "Generated by Clicky PDF",
		Class: api.Class{
			Font: &api.Font{
				Size: 0.8,
			},
			Foreground: &api.Color{Hex: "#666666"},
		},
	}

	builder.PageNumbers = true

	// Add a page
	builder.AddPage()

	// Test Text widget
	textWidget := Text{
		Text: api.Text{
			Content: "This is a test text with styling",
			Class: api.Class{
				Font: &api.Font{
					Size:   1.1,
					Bold:   true,
					Italic: true,
				},
				Foreground: &api.Color{Hex: "#0066cc"},
				Padding: &api.Padding{
					Top:    0.5,
					Bottom: 0.5,
					Left:   1.0,
					Right:  1.0,
				},
			},
		},
	}

	err := builder.DrawWidget(textWidget)
	if err != nil {
		t.Errorf("Failed to draw text widget: %v", err)
	}

	// Test Table widget
	tableWidget := Table{
		Headers: []string{"Name", "Age", "City"},
		Rows: [][]any{
			{"Alice", 30, "New York"},
			{"Bob", 25, "Los Angeles"},
			{"Charlie", 35, "Chicago"},
		},
		HeaderStyle: api.Class{
			Font: &api.Font{
				Bold: true,
			},
			Background: &api.Color{Hex: "#f0f0f0"},
			Foreground: &api.Color{Hex: "#333333"},
		},
		RowStyle: api.Class{
			Font: &api.Font{
				Size: 0.9,
			},
		},
	}

	err = builder.DrawWidget(tableWidget)
	if err != nil {
		t.Errorf("Failed to draw table widget: %v", err)
	}

	// Test Box widget
	boxWidget := Box{
		Rectangle: api.Rectangle{Width: 100, Height: 50},
		Labels: []Label{
			{
				Text: api.Text{
					Content: "Box Label",
					Class: api.Class{
						Font:       &api.Font{Bold: true},
						Foreground: &api.Color{Hex: "#ff0000"},
					},
				},
				Positionable: Positionable{
					Position: &LabelPosition{
						Vertical:   VerticalCenter,
						Horizontal: HorizontalCenter,
					},
				},
			},
		},
	}

	err = builder.DrawWidget(boxWidget)
	if err != nil {
		t.Errorf("Failed to draw box widget: %v", err)
	}

	// Test Image widget (placeholder)
	imageWidget := Image{
		Source:  "", // Empty source will create placeholder
		AltText: "Test Image",
		Width:   floatPtr(60),
		Height:  floatPtr(40),
	}

	err = builder.DrawWidget(imageWidget)
	if err != nil {
		t.Errorf("Failed to draw image widget: %v", err)
	}

	// Generate PDF
	pdfData, err := builder.Output()
	if err != nil {
		t.Fatalf("Failed to generate PDF: %v", err)
	}

	err = os.WriteFile("test_output.pdf", pdfData, 0644)
	if err != nil {
		t.Errorf("Failed to save test PDF: %v", err)
	}

	// Verify we got some PDF data
	if len(pdfData) == 0 {
		t.Error("Generated PDF is empty")
	}

	// Basic PDF structure validation
	AssertPDFBasicStructure(t, pdfData)
	
	// Verify page count
	AssertPDFPageCount(t, pdfData, 1)
	
	// Verify expected content is present in the PDF
	expectedTexts := []string{
		"Test Document",                           // Header
		"Generated by Clicky PDF",                 // Footer
		"This is a test text with styling",       // Text widget
		"Name", "Age", "City",                     // Table headers
		"Alice", "30", "New York",                 // Table row 1
		"Bob", "25", "Los Angeles",                // Table row 2
		"Charlie", "35", "Chicago",                // Table row 3
		"Box Label",                               // Box label
	}
	AssertPDFContainsText(t, pdfData, expectedTexts)
	
	// Verify text appears in expected order
	orderedTexts := []string{
		"Test Document",                           // Header should be first
		"This is a test text with styling",       // Text widget
		"Name",                                    // Table headers
		"Alice",                                   // First table row
		"Bob",                                     // Second table row  
		"Charlie",                                 // Third table row
		"Box Label",                               // Box label
		"Generated by Clicky PDF",                 // Footer should be last
	}
	AssertPDFTextOrder(t, pdfData, orderedTexts)
}

func TestResolveStylesIntegration(t *testing.T) {
	// Test that our widgets work with ResolveStyles from Tailwind classes
	builder := NewBuilder()
	builder.AddPage()

	// Create a text widget using Tailwind classes resolved to Class
	tailwindStyles := "text-blue-600 font-bold text-lg p-4 bg-gray-100"
	resolvedClass := api.ResolveStyles(tailwindStyles)

	textWidget := Text{
		Text: api.Text{
			Content: "Text styled with Tailwind classes",
			Class:   resolvedClass,
		},
	}

	err := builder.DrawWidget(textWidget)
	if err != nil {
		t.Errorf("Failed to draw text widget with resolved styles: %v", err)
	}

	// Generate PDF
	pdfData, err := builder.Output()
	if err != nil {
		t.Errorf("Failed to generate PDF with resolved styles: %v", err)
		return
	}
	
	// Basic structure validation
	AssertPDFBasicStructure(t, pdfData)
	
	// Verify page count
	AssertPDFPageCount(t, pdfData, 1)
	
	// Verify content from resolved Tailwind styles
	expectedTexts := []string{
		"Text styled with Tailwind classes",
	}
	AssertPDFContainsText(t, pdfData, expectedTexts)
}

// Helper function to create float64 pointer
func floatPtr(f float64) *float64 {
	return &f
}
